install.packages(c("rmarkdown","rticles","tinytex","knitr","visdat"),dependencies = T)
install.packages("languageserver")
install.packages(c("install.packages(c("rmarkdown"", ""rticles"", ""tinytex"", ""knitr"", ""visdat")", "dependencies", "=", "T)"))
install.packages(c("rmarkdown","rticles","tinytex","knitr","visdat"),dependencies = T)
install.packages(c("rmarkdown", "rticles", "tinytex", "knitr", "visdat"), dependencies = T)
install.packages(c("rmarkdown","rticles","tinytex","knitr","visdat"),dependencies = T)
install.packages(c("rmarkdown", "rticles", "tinytex", "knitr", "visdat"), dependencies = T)
#install.packages("mlbench",dependencies = T)
data("PimaIndiansDiabetes2", package = "mlbench")
str(PimaIndiansDiabetes2)
##Descripción de los datos
visdat::vis_dat(data_ej1,sort_type = FALSE)
library(dplyr)
diagnose(data_ej1) %>% flextable()
diagnose_category(data_ej1) %>% flextable()
freq(data_ej1$diabetes)
diagnose_numeric(data_ej1) %>% flextable()
#eliminar datos faltantes
data_ej1$insulin <- NULL
data_ej1$triceps <- NULL
data_ej2 <- na.omit(data_ej1)
library(dlookr)
library(visdat)
library(ggplot2)
library(funModeling)
library(flextable)
library(factoextra)
library(gridExtra)
# leer los datos
library(mlbench)
# leer los datos
library(mlbench)
#install.packages("mlbench",dependencies = T)
data("PimaIndiansDiabetes2", package = "mlbench")
str(PimaIndiansDiabetes2)
#pregnant: Número de veces embarazada
#glucose: Concentración de glucosa en plasma (prueba de tolerancia a la glucosa)
#pressure: Presión arterial diastólica (mm Hg)
#triceps: Grosor del pliegue cutáneo del tríceps (mm)
#insulin: Insulina sérica de 2 horas (mu U / ml)
#mass: Índice de masa corporal (peso en kg / (altura en m) \ ^ 2)
#pedigree: Diabetes función del pedigrí
#age: edad
#diabetes: Variable de clase de diabetes (prueba de diabetes)
data_ej1<-PimaIndiansDiabetes2
##Descripción de los datos
visdat::vis_dat(data_ej1,sort_type = FALSE)
library(dplyr)
diagnose(data_ej1) %>% flextable()
diagnose_category(data_ej1) %>% flextable()
freq(data_ej1$diabetes)
diagnose_numeric(data_ej1) %>% flextable()
#eliminar datos faltantes
data_ej1$insulin <- NULL
data_ej1$triceps <- NULL
data_ej2 <- na.omit(data_ej1)
dim(data_ej2)
str(data_ej2)
#Boxplot
ggplot(data_ej2, aes(y=glucose, x=factor(diabetes))) +
geom_boxplot(fill="lightgreen",varwidth = T)+
labs(x = "Diabetes", y = "Glucose")+
theme(text = element_text(size=14))+
theme_grey(base_size = 16)
##########
# Análisis de componentes principales
pca_data <- prcomp(data_ej2[,-7], scale = TRUE) #scale=T estandariza
#proporción de varianza explicada
VE <- pca_data$sdev^2
PVE <- VE / sum(VE)
round(PVE, 2)
#gráficos de proporción de varianza
# PVE
PVEp<- fviz_eig(pca_data,geom="bar")
# Cumulative PVE plot
PVEa <- qplot(c(1:length(pca_data$sdev)), cumsum(PVE)) +
geom_line() +
geom_hline(yintercept = 0.7,linetype = "dashed")+
xlab("Principal Component") +
ylab("PVE-acumulado") +
ylim(0,1)
grid.arrange(PVEp, PVEa, ncol = 2)
#contribución de variables
fviz_pca_var(pca_data,col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800",
"#FC4E07"),repel = TRUE)
View(data_ej2)
names(datos2)
pca_df <- prcomp(datos2, center = TRUE, scale = TRUE) #scale=T estandariza
pca_df
VE <- pca_df$sdev^2
PVE <- VE / sum(VE)
datos <- read.csv("rentBike_data.csv",sep = ",",header = TRUE)
summary (datos)
datos2 = datos[,-c(1, 12, 13, 14)]
datos <- read.csv("rentBike_data.csv",sep = ",",header = TRUE)
setwd("C:/Users/sipoj/Desktop/codigo informe 2")
datos <- read.csv("rentBike_data.csv",sep = ",",header = TRUE)
getwd()
setwd("C:/Users/sipoj/Desktop/codigo informe 2")
setwd("D:/UNAB/MINERIA DE DATOS/AE2")
datos <- read.csv("rentBike_data.csv",sep = ",",header = TRUE)
summary (datos)
datos2 = datos[,-c(1, 12, 13, 14)]
names(datos2)
pca_df <- prcomp(datos2, center = TRUE, scale = TRUE) #scale=T estandariza
pca_df
VE <- pca_df$sdev^2
PVE <- VE / sum(VE)
round(PVE,2)
PVEp<- fviz_eig(pca_df,geom="bar")
# Cumulative PVE plot
PVEa <- qplot(c(1:length(pca_df$sdev)), cumsum(PVE)) +
geom_line() +
geom_hline(yintercept = 0.7,linetype = "dashed")+
xlab("Principal Component") +
ylab("PVE-acumulado") +
ylim(0,1)
grid.arrange(PVEp, PVEa, ncol = 2)
fviz_pca_var(pca_df,col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800",
"#FC4E07"),repel = TRUE)
View(datos2)
grid.arrange(PVEp, PVEa, ncol = 2)
#contribución de variables
fviz_pca_var(pca_data,col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800",
"#FC4E07"),repel = TRUE)
#pca_data <- prcomp(data_ej2[,-7], scale = TRUE)
pca_df <- prcomp(datos2[,-1], center = TRUE, scale = TRUE) #scale=T estandariza
pca_df
VE <- pca_df$sdev^2
PVE <- VE / sum(VE)
round(PVE,2)
PVEp<- fviz_eig(pca_df,geom="bar")
# Cumulative PVE plot
PVEa <- qplot(c(1:length(pca_df$sdev)), cumsum(PVE)) +
geom_line() +
geom_hline(yintercept = 0.7,linetype = "dashed")+
xlab("Principal Component") +
ylab("PVE-acumulado") +
ylim(0,1)
grid.arrange(PVEp, PVEa, ncol = 2)
fviz_pca_var(pca_df,col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800",
"#FC4E07"),repel = TRUE)
grid.arrange(PVEp, PVEa, ncol = 2)
fviz_pca_var(pca_df,col.var = "contrib", gradient.cols = c("#00AFBB", "#E7B800",
"#FC4E07"),repel = TRUE)
